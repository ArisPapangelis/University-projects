kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
View(x)
library(mixtools)
model <- mvnormalmixEM(x, k=3, epsilon=0.01)
model$mu
model$lambda
model$loglik
plot(model, which=2)
lines(density(x), lty=2, lwd=2)
clusters = max.col(model$posterior)
centers = matrix(unlist(model$mu), byrow=TRUE, ncol=2)
View(centers)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
#Question 3
library(mixtools)
model <- mvnormalmixEM(x, k=3, epsilon=0.01)
model$mu
model$lambda
model$loglik
plot(model, which=2)
clusters = max.col(model$posterior)
centers = matrix(unlist(model$mu), byrow=TRUE, ncol=2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
#Question 3
library(mixtools)
model <- mvnormalmixEM(x, k=3, epsilon=0.01)
model$mu
model$lambda
model$loglik
plot(model, which=2)
clusters = max.col(model$posterior)
centers = matrix(unlist(model$mu), byrow=TRUE, ncol=2)
View(centers)
plot(model, which=1)
plot(model, which=2)
View(x)
View(kmdata)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
#Question 3
library(mixtools)
model <- mvnormalmixEM(x, k=3, epsilon=0.01)
model$mu
model$lambda
model$loglik
plot(model, which=2)
clusters = max.col(model$posterior)
centers = matrix(unlist(model$mu), byrow=TRUE, ncol=2)
setwd("C:/Users/FrenzyCawk/Desktop/HMMY/9ο Εξαμηνο/Αναγνωριση Προτυπων/Lab 6. Preprocessing, PCA, ISOMAP")
rm(list=ls())
#Section 2 Preprocessing data
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transformed)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
discAge = cut(pdata$Age, seq(0,80,10))
discSalary = cut(pdata$Salary, seq(0,4000,400), dig.lab = 4)
plot(discAge)
plot(discSalary, las=2)
discAge
library(scatterplot3d)
pdata = data.frame(X = c(1,0,-1,0,-1,1), Y = c(0,1,1,-1,0,-1), Z = c(-1,-1,0,1,1,0))
row.names(pdata) <- c("x1", "x2", "x3", "x4", "x5", "x6")
s3d = scatterplot3d(pdata, color="blue", pch=19, scale.y=1.5)
coords <- s3d$xyz.convert(pdata)
text(coords$x,coords$y, labels=row.names(pdata), pos=2)
#With prcomp
pca_model = prcomp(pdata)
eigenvalues = pca_model$sdev^2
eigenvectors = pca_model$rotation
barplot(pca_model$sdev^2 / sum(pca_model$sdev^2))
info_loss = eigenvalues[3] / sum(eigenvalues)
pca_model$sdev^2 / sum(pca_model$sdev^2)
pc <- predict(pca_model, pdata)
plot(pc, col="blue", pch=19)
text(pc, labels=row.names(pdata), pos=2)
pc
View(engdata)
Location = engdata[,5]
engdata = engdata[,1:4]
plot(engdata, col = Location, pch = c("o", "+")[Location])
cor(engdata)
pca_model <- prcomp(engdata, center=TRUE, scale=TRUE)
eigenvalues = pca_model$sdev^2
eigenvectors = pca_model$rotation
barplot(eigenvalues / sum(eigenvalues))
engdata_pc <- as.data.frame(predict(pca_model,engdata)[,1:2])
plot(engdata_pc, col = Location, pch = c("o","+")[Location])
engdata_pc[,3:4] <- 0
engdata_rec = data.frame(t(t(as.matrix(engdata_pc) %*% t(pca_model$rotation)) * pca_model$scale + pca_model$center))
plot(engdata_rec, col=Location, pch = c("o","+")[Location])
info_loss = (eigenvalues[3] + eigenvalues[4]) / sum(eigenvalues)
#Section 5 Non linear feature extraction
library(vegan)
srdata = read.csv("srdata.txt")
scatterplot3d(srdata, angle = 88, scale.y=5)
srdata_dist <- dist(srdata)
isom <- isomap(srdata_dist, ndim=2, k=4)
srdata_2d <- isom$points
colors = srdata_2d[,1] - min(srdata_2d[,1]) + 1
scatterplot3d(srdata, angle=88, scale.y = 5, color=colors)
x11(); plot(srdata_2d, col= colors)
rm(list=ls())
data(Glass, package = "mlbench")
training = Glass[c(1:50, 91:146), -10]
trainingType = factor(Glass[c(1:50, 91:146), 10])
testing = Glass[51:90, -10]
testingType = factor(Glass[51:90, 10])
#Question 1
pca_model = prcomp(training, center=TRUE, scale=TRUE)
eigenvalues = pca_model$sdev^2
eigenvectors = pca_model$rotation
information_percentage = pca_model$sdev^2 / sum(pca_model$sdev^2)
barplot(information_percentage)
information_percentage[1]
#Question 2
#Keep first 4 principal components
info_loss = sum(eigenvalues[5:9]) / sum(eigenvalues)
#Question 3
#Question 3
library(class)
library(MLmetrics)
y_pred = knn(training, testing, trainingType, k = 3)
Accuracy(y_pred, testingType)
Recall(testingType, y_pred, "2")
#Question 4
# initialize structures
accuracies <- c()
pValues = c(1:9)
# run prediction for different values of p
for (p in pValues) {
training_pc <- as.data.frame(predict(pca_model, training)[, 1:p])
testing_pc <- as.data.frame(predict(pca_model, testing)[, 1:p])
ypred = knn(training_pc, testing_pc, trainingType, k = 3)
accuracies = c(accuracies, Accuracy(ypred, testingType))
}
# return number of Principal Components that maximizes Accuracy
pValues[which.max(accuracies)]
setwd("C:/Users/FrenzyCawk/Desktop/HMMY/9ο Εξαμηνο/Αναγνωριση Προτυπων/Lab 7. kMeans, Evaluation")
rm(list=ls())
#Section 2 k-Means
X = c(7, 3, 1, 5, 1, 7, 8, 5)
Y = c(1, 4, 5, 8, 3, 8, 2, 9)
rnames = c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8")
kdata = data.frame(X, Y, row.names = rnames)
plot(kdata, pch=15)
text(kdata, labels = row.names(kdata), pos = 2)
model = kmeans(kdata, centers = kdata[1:3,])
model$centers
model$cluster
cohesion = model$tot.withinss
separation = model$betweenss
plot(kdata, col = model$cluster, pch =15)
text(kdata, labels = row.names(kdata), pos=2)
points(model$centers, col = 1:length(model$centers), pch="+", cex=2)
#Section 3 k-Means and evaluation metrics
library(cluster)
cdata = read.csv("cdata.txt")
target = cdata[,3]
cdata = cdata[, 1:2]
plot(cdata, col=target)
SSE <- (nrow(cdata)-1) * sum(apply(cdata,2,var))
SSE <- (nrow(cdata)-1) * sum(apply(cdata,2,var))
for (i in 2:10)
SSE[i] <- kmeans(cdata, centers=i)$tot.withinss
plot(1:10, SSE, type="b", xlab="Number of Clusters", ylab="SSE")
model = kmeans(cdata, centers=3)
model$centers
model$cluster
cohesion = model$tot.withinss
separation = model$betweenss
plot(cdata, col = model$cluster)
points(model$centers, col = 4, pch = "+", cex=2)
#Silhouette
model_silhouette = silhouette(model$cluster, dist(cdata))
plot(model_silhouette)
mean_silhouette = mean(model_silhouette[,3])
cdata_ord = cdata[order(model$cluster),]
heatmap(as.matrix(dist(cdata_ord)), Rowv = NA, Colv = NA, col = heat.colors(256), revC = TRUE)
library(cluster)
Rank = c("High", "Low", "High", "Low", "Low", "High")
Topic = c("SE", "SE", "ML", "DM", "ML", "SE")
conferences = data.frame(Rank, Topic)
model = pam(conferences,3)
model$medoids
model$clustering
conferences[model$id.med,]
L1 = levels(conferences$Rank)
L2 = levels(conferences$Topic)
plot(model$data, xaxt = "n", yaxt = "n", pch=15, col = model$clustering)
axis(1, at = 1:length(L1), labels = L1)
axis(2, at = 1:length(L2), labels = L2)
points(conferences[model$id.med,], col=1:3, pch="o", cex=2)
rm(list=ls())
sdata = read.csv("sdata.txt")
library(cluster)
#Question 1
x=c(-4,0,4)
y=c(10,0,10)
centers = data.frame(x,y)
model <- kmeans(sdata, centers)
model$tot.withinss
model$betweenss
model_silhouette = silhouette(model$cluster, dist(sdata))
plot(model_silhouette)
mean_silhouette = mean(model_silhouette[,3])
#Question 4
x2=c(-2,2,0)
y2=c(0,0,10)
centers2 = data.frame(x2,y2)
model2 <- kmeans(sdata, centers2)
model_silhouette2 = silhouette(model2$cluster, dist(sdata))
plot(model_silhouette2)
mean_silhouette2 = mean(model_silhouette2[,3])
which.max(c(mean_silhouette, mean_silhouette2))
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
setwd("C:/Users/FrenzyCawk/Desktop/HMMY/9ο Εξαμηνο/Αναγνωριση Προτυπων/Lab 9. Expectation Maximization, GMMs")
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
#Question 3
#Question 3
library(mixtools)
model <- mvnormalmixEM(x, k=3, epsilon=0.01)
model$mu
model$lambda
model$loglik
plot(model, which=2)
rm(list=ls())
library(mixtools)
kmdata = read.csv("kmdata.txt")
x = kmdata[, 1:2]
y = kmdata[, 3]
#Question 1
plot(x)
plot(x, col=y, pch=15)
#Question 2
model = kmeans(x, 3)
plot(x, col = model$cluster, pch = 15)
points(model$centers, col = 1:length(model$centers), pch = "+", cex = 2)
#Question 3
library(mixtools)
model <- mvnormalmixEM(x, k=3, epsilon=0.01)
model$mu
model$lambda
model$loglik
plot(model, which=2)
clusters = max.col(model$posterior)
centers = matrix(unlist(model$mu), byrow=TRUE, ncol=2)
setwd("C:/Users/FrenzyCawk/Desktop/HMMY/9ο Εξαμηνο/Αναγνωριση Προτυπων/Lab 8. Hierarchical Clustering, DBSCAN")
#Section 2 Hierarchical clustering
X = c(2,8,0,7,6)
Y = c(0,4,6,2,1)
rnames = c("x1", "x2", "x3", "x4", "x5")
hdata = data.frame(X, Y, row.names = rnames)
plot(hdata, pch=15)
text(hdata, labels = row.names(hdata), pos=2)
d = dist(hdata)
hc_single = hclust(d, method = "single")
plot(hc_single)
hc_complete = hclust(d, method = "complete")
plot(hc_complete)
clusters = cutree(hc_single, k = 2)
plot(hdata, col = clusters, pch=15, main = "Single Linkage")
text(hdata, labels = row.names(hdata), pos = 2)
library(cluster)
library(scatterplot3d)
europe = read.csv("europe.txt")
d = dist(scale(europe))
hc <- hclust(d, method = "complete")
plot(hc)
slc = c()
for (i in 2:20){
clusters = cutree(hc, k=i)
slc[i-1] = mean(silhouette(clusters,d)[,3])
}
plot(2:20,slc,type = "b", xlab = "Number of Clusters", ylab = "Silhouette")
clusters = cutree(hc, k=7)
plot(hc)
rect.hclust(hc, k=7)
s3d = scatterplot3d(europe, angle = 125, scale.y = 1.5, color = clusters)
coords <- s3d$xyz.convert(europe)
text(coords$x, coords$y, labels=row.names(europe), pos=sample(1:4), col = clusters)
model_silhouette = silhouette(clusters,d)
plot(model_silhouette)
library(dbscan)
X = c(2, 2, 8, 5, 7, 6, 1, 4)
Y = c(10, 5, 4, 8, 5, 4, 2, 9)
rnames = c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8")
ddata = data.frame(X, Y, row.names = rnames)
plot(ddata, pch = 15)
text(ddata, labels = row.names(ddata), pos = 4)
model = dbscan(ddata, eps=2, minPts=2)
clusters = model$cluster
plot(ddata, col = clusters+1, pch = 15, main = "DBSCAN(eps=2, minPts=2)")
text(ddata, labels = row.names(ddata), pos = 4)
model = dbscan(ddata, eps=3.5, minPts=2)
clusters = model$cluster
plot(ddata, col = clusters+1, pch = 15, main = "DBSCAN(eps=3.5, minPts=2)")
text(ddata, labels = row.names(ddata), pos = 4)
#Section 5 Application with density based clustering
mdata = read.csv("mdata.txt")
plot(mdata)
model = kmeans(mdata, 2)
plot(mdata, col = model$cluster+1)
knndist = kNNdist(mdata, k=10, all=TRUE)
kdist = knndist[,10]
plot(sort(kdist), type = "l", xlab = "Points sorted by distance", ylab = "10-NN distance")
model = dbscan(mdata, eps = 0.4, minPts = 10)
plot(mdata, col=model$cluster+1, pch = ifelse(model$cluster,1,4))
rm(list=ls())
library(dbscan)
dcdata = read.csv("dcdata.txt")
target = dcdata[, 3]
dcdata = dcdata[, 1:2]
plot(dcdata, col = target, pch = 15, main = "Ground Truth")
d = dist(dcdata)
#This fails at clustering
model1 = hclust(d, method = "single")
plot(model1)
clusters = cutree(model1, k = 2)
plot(dcdata, col = clusters, pch=15, main = "Single Linkage")
#This succeeds at clustering
model2 = hclust(d, method = "complete")
plot(model2)
clusters = cutree(model2, k = 2)
plot(dcdata, col = clusters, pch=15, main = "Complete Linkage")
#This partially succeeds at clustering only with eps = 1.25
epsilon = c(0.75, 1, 1.25, 1.5)
for (i in 1:4){
model3 = dbscan(dcdata, eps = epsilon[i], minPts = 5)
clusters = model3$cluster
plot(dcdata, col = clusters+1, pch = 15, main = "DBSCAN")
}
#This succeeds at clustering
model4 = kmeans(dcdata, 2)
plot(dcdata, col = model4$cluster, pch=15, main = "kMeans")
#Question2
library(MLmetrics)
Accuracy(cutree(model1, k=2), target)
#Question3
Accuracy(cutree(model2, k=2), target)
