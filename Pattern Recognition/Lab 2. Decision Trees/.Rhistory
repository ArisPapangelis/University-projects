getwd()
setwd(Desktop)
setwd('C:\Users\FrenzyCawk\Desktop\HMMY\9ο Εξαμηνο\Αναγνωριση Προτυπων\Lab 1. Introduction to R')
setwd("C:\Users\FrenzyCawk\Desktop\HMMY\9ο Εξαμηνο\Αναγνωριση Προτυπων\Lab 1. Introduction to R")
setwd("C:\Users\FrenzyCawk\Desktop\HMMY\9ο Εξαμηνο\Αναγνωριση Προτυπων\Lab.Introduction to R")
setwd("C:\Users\FrenzyCawk\Desktop\HMMY\9ο Εξαμηνο\Αναγνωριση Προτυπων\")
setwd("C:\\Users\FrenzyCawk\Desktop\HMMY\9ο Εξαμηνο\Αναγνωριση Προτυπων\")
setwd("C:\\Users\\FrenzyCawk\\Desktop\\HMMY\\9ο Εξαμηνο\\Αναγνωριση Προτυπων\")
getwd()
setwd("C:\\Users\\FrenzyCawk\\Desktop\\HMMY\\9ο Εξαμηνο\\Αναγνωριση Προτυπων\")
setwd("C:\\Users\\FrenzyCawk\\Desktop\\HMMY\\9ο Εξαμηνο\\Αναγνωριση Προτυπων\");
setwd("C:\\Users\\FrenzyCawk\\Desktop\\HMMY\\9ο Εξαμηνο\\Αναγνωριση Προτυπων\");
setwd("C:\\Users\\FrenzyCawk\\Desktop")
getwd()
setwd("C:\\Users\\FrenzyCawk\\Desktop\\Lab 1. Introduction to R/")
ls()
ls
?ls
ls(0)
ls()
setwd("C:\\Users\\FrenzyCawk\\Desktop\\Lab 1. Introduction to R/")
getwd()
A[c(1,3:5)]
rm(list=ls())
A = c(10,5,3,100,-2,5,-50)
A
A[c(1,3:5)]
A > 5
which(A>5)         # Returns the positions for the elements of A that are higher than 5
S = A > 0          # Find with (TRUE, FALSE) the positive elements of A
positives = A[A>0] # Select positive elements of A
positives          # Print positives to screen
A = c(10,5,3,100,-2,5,-50)
B = c(1 ,2, 5, 6, 9, 0, 100)
cbind(A,B)         # Add as column
rbind(A,B)         # Add as row
ls()
rm(ls())
rm(list=ls()
rm(ls())
rm(ls()))
rm(ls())
rm(list=ls())
rm(list=ls())
A = c(10,5,3,100,-2,5,-50)
A
A[c(1,3:5)]
A > 5
which(A>5)         # Returns the positions for the elements of A that are higher than 5
S = A > 0          # Find with (TRUE, FALSE) the positive elements of A
positives = A[A>0] # Select positive elements of A
positives          # Print positives to screen
A = c(10,5,3,100,-2,5,-50)
B = c(1 ,2, 5, 6, 9, 0, 100)
cbind(A,B)         # Add as column
rbind(A,B)         # Add as row
rm(list=ls())
A=c(10,5,3,100,-2,5,-50)
A
A[1 2]
A[1,2]
A[c(1,2)]
A[c(1,4:5)]
A>5
which(A>5)
which(A>=5)
S=A>0
positives = A[S]
positives
positives = A[A>0]
positives
length(positives)
B=c(1,2,5,6,9,0,100)
cbind(A,B)
rbind(A,B)
var=rbind(A,B)
var
rm(var)
m = matrix(1:9, byrow=TRUE, nrow=3)
m
m2=matrix(10:18,byrow=TRUE,nrow=3)
Mat=cbind(m,m2)
Mat
rowSums(Mat)
colSums(Mat)
mean(Mat)
a=matrix(10:18,byrow=TRUE,nrow=3)
b=matrix(c(3,6,7,10,8,1,2,3,2),byrow=TRUE,nrow=3)
a*b
a%*%b
a%*b%
a%*b%
a%*b%
end
a%*%b
n=c(2,3,5)
s=c("aa","bb","cc")
b=c(TRUE,FALSE,TRUE)
data.frame(n,s,b)
df = data.frame(n,s,b)
df
df$n
df$s
df$b
df$s
getwd()
read.csv("people.txt")
people = read.csv("people.txt")
people
people
rm(people$Weight[c(3)])
View(people)
View(people)
rm(people$Weight)
rm(a)
m = median(people$Weight, na.rm =TRUE)
people$Weight[is.na(people$Weight)] = m
for (i in 1:10) {}
for (i in 1:10) {
print(i)
}
for (i in 1:10) {
if (i%%2 == 0) {}
}
for (i in 1:10) {
if (i%%2 == 0) {
print(i)
}
}
for (i in 0:100) {
if (i%%2 == 0) {
print(i)
}
}
data()
iris
str(iris)
summary(iris)
s1 = iris$Sepal.Length
s1
mean(s1)
median(s1)
min(s1)
max(s1)
s1
rawr=iris
rm(rawr)
sd(s1)
var(s1)
range(s1)
cor(iris[1:4])
cor(iris[1:4])
plot(s1)
?plot
rm(list=ls())
dn = list(paste("Y", as.character(1949:1960), sep = ""), month.abb)
airmat = matrix(AirPassengers, 12, byrow = TRUE, dimnames = dn)
air = as.data.frame(t(airmat))
?list
dn
airmat
AirPassengers
air
air
mean(air$Y1951)
airmat
airmat$Jan
air
dn
air
View(air)
View(air)
max(air[c(1,2)])
air[1]
max(air[c(,1:2)])
max(air[,c(1:2)])
max(air[, c(1,2)])
max(air[c(1,2), ])
air[c(1,2),]
max(air[1, ])
max(air[2, ])
?cor
cor(air$Y1951, air$Y1952:Y1954)
cor(air$Y1951, air$Y1952)
cor(air$Y1951, air[,c(4:6)])
cor(air[11,], air[c(1,2),])
cor(air[11,], air[c(1,2),])
air[c(1,2),
e
wef
air[c(1,2),]
air("Jan")
air["Jan",]
air["Jan","Feb",]
air[c("Jan","Feb"),]
cor(air["Nov",], air[c("Jan","Feb"),])
air["Nov"]
air["Nov",]
cor(unlist(air["Nov",]), unlist(air[c("Jan","Feb")),])
cor(unlist(air["Nov",]), unlist(air[c("Jan","Feb")),])
cor(unlist(air["Nov",]), unlist(air[c("Jan","Feb")),])
cor(unlist(air["Nov",]), unlist(air[c("Jan","Feb"),]))
cor(c(air["Nov",]), c(air[c("Jan","Feb"),])
aef
cor(c(air["Nov",]), c(air[c("Jan","Feb"),]))
cor(c(air[11,]), c(air[c(1,2),]))
cor(c(air["Nov",]), c(air[c("Jan"),]))
cor(air["Nov",], air[c("Jan","Feb"),])
cor(air["Nov",], air[c("Jan"),])
cor(air["Nov",], air["Jan",])
cor(air["Nov",], air[c("Jan","Feb"),])
air[c("Jan","Feb"),]
list(air[c("Jan","Feb"),])
t(air[c("Jan","Feb"),])
?T
?t
cor(t(air["Nov",]), t(air[c("Jan","Feb"),])
awda
cor(t(air["Nov",]), t(air[c("Jan","Feb"),]))
air
colSums(air)
unlist(colSums(air))
sums = colSums(air)
sums
plot(sums)
unlist(air["Jan"])
unlist(air["Jan",])
?plot
plot(sums, type = "l")
setwd("C:/Users/FrenzyCawk/Desktop/Lab 2. Decision Trees")
install.packages("rpart.plot")
library(raprt)
library(rpart)
libraries
?library
package
packages
libraries()
library()
library(rpart.plot)
?rpart
weather= read.csv("weather.txt")
weather
model <- rpart(Play ~ Outlook, method = "class", data = weather, minsplit = 1)
model
rpart.plot(model, extra=104, nn=TRUE)
?raprt.plot
?rpart.plot
weather
?table
absfreq = table(weather[, c(1,4)])
absfreq
weather[, c(1,4)]
?prop.table
freq = prop.table(absfreq,1)
freq
freqSum = rowSums(prop.table(absfreq))
freqSum
prop.table(absfreq)
freq = prop.table(table(weather[, c(4)]))
freq
table(weather[, c(4)])
9/15
model <- rpart( Play ~ Outlook +Temperature +Humidity, method = "class", data=weather, minsplit=1, minbucket=1, cp=-1)
rpart.plot(model,extra = 104, nn=TRUE)
rm(list=ls())
# Read data from disk
setwd("...")
weather = read.csv("weather.txt")
# Import decision tree libraries
library(rpart)
library(rpart.plot)
# Split on Outlook
model <- rpart(Play ~ Outlook, method = "class", data = weather, minsplit=1)
rpart.plot(model, extra = 104, nn = TRUE)
# Split on Temperature
model <- rpart(Play ~ Temperature, method = "class", data = weather, minsplit=1)
rpart.plot(model, extra = 104, nn = TRUE)
# Split on Humidity
model <- rpart(Play ~ Humidity, method = "class", data = weather, minsplit=1)
rpart.plot(model, extra = 104, nn = TRUE)
# Create complete (unpruned) tree
model <- rpart(Play ~ Outlook + Temperature + Humidity, method = "class", data = weather, minsplit=1, minbucket=1, cp=-1)
rpart.plot(model, extra = 104, nn = TRUE)
# Create tables with frequencies for Outlook
absfreq = table(weather[, c(1, 4)])
rm(list=ls())
# Read data from disk
setwd("...")
weather = read.csv("weather.txt")
# Create tables with frequencies for Outlook
absfreq = table(weather[, c(1, 4)])
freq = prop.table(absfreq, 1)
freqSum = rowSums(prop.table(absfreq))
# Calculate GINI index of Outlook
GINI_Sunny = 1 - freq["Sunny", "No"]^2 - freq["Sunny", "Yes"]^2
GINI_Rainy = 1 - freq["Rainy", "No"]^2 - freq["Rainy", "Yes"]^2
GINI_Outlook = freqSum["Sunny"] * GINI_Sunny + freqSum["Rainy"] * GINI_Rainy
# Create table with frequencies for Temperature
absfreq = table(weather[, c(2, 4)])
freq = prop.table(absfreq, 1)
freqSum = rowSums(prop.table(absfreq))
# Calculate GINI index of Temperature
GINI_Hot = 1 - freq["Hot", "No"]^2 - freq["Hot", "Yes"]^2
GINI_Cool = 1 - freq["Cool", "No"]^2 - freq["Cool", "Yes"]^2
GINI_Temperature = freqSum["Hot"] * GINI_Hot + freqSum["Cool"] * GINI_Cool
# Create table with frequencies for Humidity
absfreq = table(weather[, c(3, 4)])
freq = prop.table(absfreq, 1)
freqSum = rowSums(prop.table(absfreq))
# Calculate GINI index of Humidity
GINI_High = 1 - freq["High", "No"]^2 - freq["High", "Yes"]^2
GINI_Low = 1 - freq["Low", "No"]^2 - freq["Low", "Yes"]^2
GINI_Humidity = freqSum["High"] * GINI_High + freqSum["Low"] * GINI_Low
rm(list=ls())
iris2
iris3
iris2 = iris[, c(1,2,5)]
iris2
iris2$Species[c(101:150)] = iris2$species[c(21:70)]
iris2$Species[c(101:150)] = iris2$Species[c(21:70)]
iris2
iris2$Species = factor(iris2$Species)
iris
iris2
?factor
trainingdata = iris2[c(1:40, 51:90, 101:140),] testdata = iris2[c(41:50, 91:100, 141:150),]
trainingdata = iris2[c(1:40, 51:90, 101:140),]
testdata = iris2[c(41:50, 91:100, 141:150),]
model <- rpart(Species ~ ., method = "class", data = trainingdata, minsplit = 20)
# model <- rpart(Species ~ ., method = "class", data = trainingdata, minsplit = 30)
rpart.plot(model, extra = 104, nn = TRUE)
xtest=testdata[,1:2]
xtest
ytest = testdata[,3]
y
ytest
pred = predict (model,xtest, type="class")
pred
cm = as.matrix(table(Actual = ytest, Predicted = Predicted))
cm = as.matrix(table(Actual = ytest, Predicted = pred))
cm
accuracy = sum(diag(cm)) / sum(cm)
precision = diag(cm) / colSums(cm)
precision
recall = diag(cm) / rowSums(cm)
f1 = 2 * precision * recall / (precision + recall)
data.frame(precision, recall, f1)
