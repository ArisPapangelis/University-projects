setwd("C:/Users/FrenzyCawk/Desktop/HMMY/9ο Εξαμηνο/Αναγνωριση Προτυπων/Lab 6. Preprocessing, PCA, ISOMAP")
rm(listls())
rm(ls())
rm(list(ls())
rm(list(ls()))
rm(list=ls())
rm(list=ls())
engdata = read.csv("engdata.txt")
engdata
head(engdata)
summary(engdata)
rm(list=ls())
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
View(pdata)
rm(list=ls())
#Section 2
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
rm(list=ls())
#Section 2
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transfor)
rm(list=ls())
#Section 2
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transformed)
sampdata = pdata[sample(nrow(pdata), 250, replace),]
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE),]
rm(list=ls())
#Section 2
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transformed)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
discAge = cut(pdata$Age, seq(0,80,10))
discSalary = cut(pdata$Salary, seq(0,4000,400), dig.lab = 4)
discAge
discSalary
?plot
discAge = cut(pdata$Age, seq(0,80,10))
discSalary = cut(pdata$Salary, seq(0,4000,400), dig.lab = 4)
plot(discAge)
plot(discSalary, las=2)
rm(list=ls())
rm(list=ls())
#Section 2 Preprocessing data
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transformed)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
discAge = cut(pdata$Age, seq(0,80,10))
discSalary = cut(pdata$Salary, seq(0,4000,400), dig.lab = 4)
plot(discAge)
plot(discSalary, las=2)
#Secton 3 PCA feature extraction
install.packages("scatterplot3d")
rm(list=ls())
#Section 2 Preprocessing data
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transformed)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
discAge = cut(pdata$Age, seq(0,80,10))
discSalary = cut(pdata$Salary, seq(0,4000,400), dig.lab = 4)
plot(discAge)
plot(discSalary, las=2)
#Secton 3 PCA feature extraction
pdata = data.frame(X = c(1,0,-1,0,-1,1), Y = c(0,1,1,-1,0,-1), Z = c(-1,-1,0,1,1,0))
row.names(pdata) <- c("x1", "x2", "x3", "x4", "x5", "x6")
library(scatterplot3d)
View(pdata)
library(scatterplot3d)
pdata = data.frame(X = c(1,0,-1,0,-1,1), Y = c(0,1,1,-1,0,-1), Z = c(-1,-1,0,1,1,0))
row.names(pdata) <- c("x1", "x2", "x3", "x4", "x5", "x6")
s3d = scatterplot3d(pdata, color="blue", pch=19, scale.y=1.5)
View(s3d)
coords <- s3d$xyz.convert(pdata)
View(coords)
text(coords$x,coords$y, labels=row.names(pdata), pos=2)
s3d = scatterplot3d(pdata, color="blue", pch=18, scale.y=1.5)
coords <- s3d$xyz.convert(pdata)
text(coords$x,coords$y, labels=row.names(pdata), pos=2)
s3d = scatterplot3d(pdata, color="blue", pch=19, scale.y=1.5)
coords <- s3d$xyz.convert(pdata)
text(coords$x,coords$y, labels=row.names(pdata), pos=2)
rm(list=ls())
#Section 2 Preprocessing data
engdata = read.csv("engdata.txt")
pdata = engdata[, 1:2]
pdata = unique(pdata)
transformed <- scale(pdata, center=TRUE, scale=TRUE)
plot(pdata)
plot(transformed)
sampdata = pdata[sample(nrow(pdata), 250, replace=TRUE), ]
plot(pdata)
plot(sampdata)
discAge = cut(pdata$Age, seq(0,80,10))
discSalary = cut(pdata$Salary, seq(0,4000,400), dig.lab = 4)
plot(discAge)
plot(discSalary, las=2)
#Secton 3 PCA feature extraction
library(scatterplot3d)
pdata = data.frame(X = c(1,0,-1,0,-1,1), Y = c(0,1,1,-1,0,-1), Z = c(-1,-1,0,1,1,0))
row.names(pdata) <- c("x1", "x2", "x3", "x4", "x5", "x6")
s3d = scatterplot3d(pdata, color="blue", pch=19, scale.y=1)
coords <- s3d$xyz.convert(pdata)
text(coords$x,coords$y, labels=row.names(pdata), pos=2)
s3d = scatterplot3d(pdata, color="blue", pch=19, scale.y=1.5)
coords <- s3d$xyz.convert(pdata)
text(coords$x,coords$y, labels=row.names(pdata), pos=2)
covmat = cov(pdata)
eigenvalues = eigen(covmat)$values
eigenvectors = eigen(covmat)$vectors
pdata_pc = as.matrix(pdata) %*% eigenvectors[, 1:2]
info_loss = eigenvalues[3] / sum(eigenvalues)
View(covmat)
eigenvalues
View(eigenvectors)
View(pdata_pc)
pca_model = prcomp(pdata)
View(pca_model)
pca_model = prcomp(pdata)
eigenvalues = pca_model$sdev^2
eigenvectors = pca_model$rotation
eigenvalues
barplot(pca_model$sdev^2 / sum(pca_model$sdev^2))
sum(pca_model$sdev^2)
pca_model$sdev^2
info_loss = eigenvalues[3] / sum(eigenvalues)
pc <- predict(pca_model, pdata)
plot(pc, col="blue", pch=19)
text(pc, labels=row.names(pdata), pos=2)
plot(engdata, col = Location, pch = c("o", "+")[Location])
cor(engdata)
Location = engdata[,5]
engdata = engdata[,1:4]
plot(engdata, col = Location, pch = c("o", "+")[Location])
cor(engdata)
View(engdata)
Location = engdata[,5]
engdata = engdata[,1:4]
plot(engdata, col = Location, pch = c("o", "+")[Location])
cor(engdata)
pca_model <- prcomp(engdata, center=TRUE, scale=TRUE)
eigenvalues = pca_model$sdev^2
eigenvectors = pca_model$rotation
barplot(eigenvalues / sum(eigenvalues))
engdata_pc <- as.data.frame(predict(pca_model,engdata)[,1:2])
plot(engdata_pc, col = Location, pch = c("o","+")[Location])
View(engdata_pc)
engdata_pc[,3:4] <- 0
engdata_rec = data.frame(t(t(as.matrix(engdata_pc) %*% t(pca_model$rotation)) * pca_model$scale + pca_model$center))
plot(engdata_rec, col=Location, pch = c("o","+")[Location])
info_loss = (eigenvalues[3] + eigenvalues[4]) / sum(eigenvalues)
data(Glass, package = "mlbench")
View(Glass)
data(Glass, package = "mlbench")
training = Glass[c(1:50, 91:146), -10]
View(training)
View(Glass)
srdata = read.csv("srdata.txt")
scatterplot3d(srdata, angle = 88, scale.y=5)
scatterplot3d(srdata, angle = 90, scale.y=5)
scatterplot3d(srdata, angle = 88, scale.y=5)
?dist
srdata_dist <- dist(srdata)
dist(srdata)
srdata
srdata = read.csv("srdata.txt")
scatterplot3d(srdata, angle = 88, scale.y=5)
srdata_dist <- dist(srdata)
isom <- isomap(srdata_dist, ndim=2, k=4)
srdata_2d <- isom$points
install.packages("vegan")
library(vegan)
srdata = read.csv("srdata.txt")
scatterplot3d(srdata, angle = 88, scale.y=5)
srdata_dist <- dist(srdata)
isom <- isomap(srdata_dist, ndim=2, k=4)
srdata_2d <- isom$points
srdata_2d
colors = srdata_2d[,1] - min(srdata_2d[,1]) + 1
colors
colors = srdata_2d[,1] - min(srdata_2d[,1]) + 1
scatterplot3d(srdata, angle=88, scale.y = 5, color=colors)
plot(colors)
plot(srdata_2d)
x11()
x11(); plot(srdata_2d, col= colors)
?x11()
rm(list=ls())
data(Glass, package = "mlbench")
training = Glass[c(1:50, 91:146), -10]
trainingType = factor(Glass[c(1:50, 91:146), 10])
testing = Glass[51:90, -10]
testingType = factor(Glass[51:90, 10])
?factor
trainingType
Glass[c(1:50, 91:146), 10]
trainingType = Glass[c(1:50, 91:146), 10]
trainingType
rm(list=ls())
data(Glass, package = "mlbench")
training = Glass[c(1:50, 91:146), -10]
trainingType = factor(Glass[c(1:50, 91:146), 10])
testing = Glass[51:90, -10]
testingType = factor(Glass[51:90, 10])
