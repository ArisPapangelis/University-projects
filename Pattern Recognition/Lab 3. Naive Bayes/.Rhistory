setwd("C:/Users/FrenzyCawk/Desktop/Lab 3. Naive Bayes")
library(e1071)
install.packages("e1071")
library(e1071)
library(MLmetrics)
install.packages("MLmetrics")
install.packages("ROCR")
library(MLmetrics)
library(ROCR)
getwd()
rm(list=ls())
traffic = read.csv("traffic.txt")
library(e1071)
rm(list=ls())
traffic = read.csv("traffic.txt")
library(e1071)
model <- naiveBayes(HighTraffic ~ . , data = traffic)
print(model)
traffic
?factor
levels(traffic$Day)
trvalue <- data.frame(Weather=factor("Hot", levels(traffic$Weather)), Day = factor("Vacation", levels(traffic$Day)))
trvalue
traffic
rm(list=ls())
traffic = read.csv("traffic.txt")
library(e1071)
model <- naiveBayes(HighTraffic ~ . , data = traffic)
print(model)
trvalue <- data.frame(Weather=factor("Hot", levels(traffic$Weather)), Day = factor("Vacation", levels(traffic$Day)))
predict(model,trvalue)
predict(model,trvalue, type = "raw")
model <- naiveBayes(HighTraffic ~ . , data = traffic, laplace = 1)
print(model)
model <- naiveBayes(HighTraffic ~ . , data = traffic, laplace = 1)
print(model)
trvalue <- data.frame(Weather = factor("Hot", levels(traffic$Weather)), Day = factor("Weekend", levels(traffic$Day)))
predict(model,trvalue)
predict(model,trvalue, type = "raw")
data(HouseVotes84, package = "mlbench")
install.packages("mlbench")
data(HouseVotes84, package = "mlbench")
View(HouseVotes84)
View(HouseVotes84)
votes = na.omit(HouseVotes84)
View(votes)
View(HouseVotes84)
View(HouseVotes84)
votes
xtest = testingdata[,-1]
ytest = testingdata[,1]
data(HouseVotes84, package = "mlbench")
votes = na.omit(HouseVotes84)
library(e1071)
library(MLmetrics)
library(ROCR)
trainingdata = votes[1:180,]
testingdata = votes[181:232,]
model <- naiveBayes(Class ~ ., data=trainingdata)
xtest = testingdata[,-1]
ytest = testingdata[,1]
xtest
testingdata
ytest
#ROC
data(HouseVotes84, package = "mlbench")
votes = na.omit(HouseVotes84)
library(e1071)
library(MLmetrics)
library(ROCR)
trainingdata = votes[1:180,]
testingdata = votes[181:232,]
model <- naiveBayes(Class ~ ., data=trainingdata)
xtest = testingdata[,-1]
ytest = testingdata[,1]
pred = predict(model,xtest)
predprob = predict(model,xtest, type = "raw")
pred
predprob
pred
ytest
#ROC
data(HouseVotes84, package = "mlbench")
votes = na.omit(HouseVotes84)
library(e1071)
library(MLmetrics)
library(ROCR)
trainingdata = votes[1:180,]
testingdata = votes[181:232,]
model <- naiveBayes(Class ~ ., data=trainingdata)
xtest = testingdata[,-1]
ytest = testingdata[,1]
pred = predict(model,xtest)
predprob = predict(model,xtest, type = "raw")
ConfusionMatrix(pred,ytest)
Precision(ytest,pred,"democrat")
Recall(ytest,pred,"democrat")
predprob
data(HouseVotes84, package = "mlbench")
votes = na.omit(HouseVotes84)
library(e1071)
library(MLmetrics)
library(ROCR)
trainingdata = votes[1:180,]
testingdata = votes[181:232,]
model <- naiveBayes(Class ~ ., data=trainingdata)
xtest = testingdata[,-1]
ytest = testingdata[,1]
pred = predict(model,xtest)
predprob = predict(model,xtest, type = "raw")
ConfusionMatrix(pred,ytest)
Precision(ytest,pred,"democrat")
Recall(ytest,pred,"democrat")
pred_obj = prediction = prediction(predprob[,1], ytest, label.ordering = c("republican","democrat"))
ROCcurve <- performance(pred_obj,"tpr","fpr")
pred_obj
ROCcurve
?abline
plot(ROCcurve, col = "blue")
plot(ROCcurve, col = "blue")
abline(0,1, col = "grey")
rm(list=ls())
traffic = read.csv("traffic.txt")
library(e1071)
#Without Laplace Smoothing
model <- naiveBayes(HighTraffic ~ . , data = traffic)
print(model)
trvalue <- data.frame(Weather=factor("Hot", levels(traffic$Weather)), Day = factor("Vacation", levels(traffic$Day)))
predict(model,trvalue)
predict(model,trvalue, type = "raw")
#With Laplace Smoothing
model <- naiveBayes(HighTraffic ~ . , data = traffic, laplace = 1)
print(model)
trvalue <- data.frame(Weather = factor("Hot", levels(traffic$Weather)), Day = factor("Weekend", levels(traffic$Day)))
predict(model,trvalue)
predict(model,trvalue, type = "raw")
#ROC
data(HouseVotes84, package = "mlbench")
votes = na.omit(HouseVotes84)
library(e1071)
library(MLmetrics)
library(ROCR)
trainingdata = votes[1:180,]
testingdata = votes[181:232,]
model <- naiveBayes(Class ~ ., data=trainingdata)
xtest = testingdata[,-1]
ytest = testingdata[,1]
pred = predict(model,xtest)
predprob = predict(model,xtest, type = "raw")
ConfusionMatrix(pred,ytest)
Precision(ytest,pred,"democrat")
Recall(ytest,pred,"democrat")
pred_obj = prediction = prediction(predprob[,1], ytest, label.ordering = c("republican","democrat"))
ROCcurve <- performance(pred_obj,"tpr","fpr")
plot(ROCcurve, col = "blue")
abline(0,1, col = "grey")
performance(pred_obj, "auc")
performance(pred_obj, "auc")
rm(list=ls())
library(e1071)
library(MLmetrics)
library(ROCR)
Class = c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
P_M1 = c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
P_M2 = c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
data = data.frame(Class, P_M1, P_M2)
data
rm(list=ls())
library(e1071)
library(MLmetrics)
library(ROCR)
Class = c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
P_M1 = c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
P_M2 = c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
data = data.frame(Class, P_M1, P_M2)
pred_obj = prediction(data$P_M1, data$Class, label.ordering = c("0","1"))
ROCcurve <- performance(pred_obj,"tpr")
ROCcurve
plot(ROCcurve)
rm(list=ls())
library(e1071)
library(MLmetrics)
library(ROCR)
Class = c(1, 1, 0, 0, 1, 1, 0, 0, 1, 0)
P_M1 = c(0.73, 0.69, 0.44, 0.55, 0.67, 0.47, 0.08, 0.15, 0.45, 0.35)
P_M2 = c(0.61, 0.03, 0.68, 0.31, 0.45, 0.09, 0.38, 0.05, 0.01, 0.04)
data = data.frame(Class, P_M1, P_M2)
#Question 1
pred_obj = prediction(data$P_M1, data$Class, label.ordering = c("0","1"))
ROCcurve <- performance(pred_obj,"tpr")
print(ROCcurve)
plot(ROCcurve)
#Question 2
